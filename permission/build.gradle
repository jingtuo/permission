/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/custom_plugins.html
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'
    // Use the Maven Publish Plugin to generate the published metadata for your plugin
    id 'maven-publish'
    // The latest version of the Plugin Publishing Plugin can be found on the Gradle Plugin Portal.
    // https://plugins.gradle.org/m2/com/gradle/publish/plugin-publish-plugin/
    id 'com.gradle.plugin-publish' version '1.0.0'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
}

//发布到Gradle Plugin Portal需要的配置
group = 'io.github.jingtuo'
version = '1.2'
//发布到Gradle Maven仓库时会使用工程名称作为artifactId

def pluginName = "Permission Plugin For Android Application/Library"
def pluginDescription = "Statistics permissions by parsing the 'uses-permission' tag of the AndroidManifest.xml file"

def siteUrl = "https://jingtuo.github.io/permission/"
def githubUrl = "https://github.com/jingtuo/permission"
def gitHttpUrl = "https://github.com/jingtuo/permission.git"

pluginBundle {
    // Set the website for your plugin’s project.
    website = siteUrl
    // Provide the source repository URI so that others can find it if they want to contribute.
    vcsUrl = gitHttpUrl
    tags = ['Android', 'Permission']
}

gradlePlugin {
    // Define the plugin
    plugins {
        permission {
            id = 'io.github.jingtuo.permission'
            displayName = pluginName
            description = pluginDescription
            implementationClass = 'io.github.jingtuo.permission.PermissionPlugin'
        }
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

tasks.named('test') {
    // Use JUnit Jupiter for unit tests.
    useJUnitPlatform()
}

// 发布到本地
publishing {
    //MavenPluginPublishPlugin会生成一个pluginMaven的publication

    //MavenPluginPublishPlugin会根据'gradlePlugin.plugins.插件名'的插件名生成一个publication
    //如插件名是permission, 则会生成一个permissionPluginMarkerMaven
    //详见: MavenPluginPublishPlugin

    //每一个publication都会生成发布任务
    //如publication是permission
    //则生成一个publishPermissionPublicationTo仓库(repositories每有一个仓库配置, 便有一个)
    publications {
        permission(MavenPublication) {
            artifactId = "permission"
            from components.java
            pom {
                name = pluginName
                description = pluginDescription

                developers {
                    developer {
                        id = "JingTuo"
                        name = "Jing Tuo"
                        email = "jing.tuo@qq.com"
                    }
                }

                licenses {
                    license {
                        name = 'Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                scm {
                    connection = githubUrl
                    developerConnection = gitHttpUrl
                    url = siteUrl
                }
            }

        }
    }
    repositories {
        maven {
            name = 'localPlugin'
            url = System.getProperty("user.home") + "/.gradle/localPlugin"
        }
    }
}

javadoc {
    options.encoding = "UTF-8"
}